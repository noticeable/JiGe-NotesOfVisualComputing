bsp树是要分割一个非凸多边形集，使其最终每个子集都是一个凸集
如何判断凸集：如果网格的所有多边形都在网格其他多边形的同侧，那么就是凸集
如何判断多边形1在多边形2的同侧：就判断poly2的所有顶点是不是在poly1的同侧
如何判断点是否在面的同侧：几何运算，自己操作去....

所以对于一个需要构建bsp树的多面体来说，一开始先判断是否是凸形
如果不是就先找出它的凸包面（就是构成多面体凸包的平面），
然后剩下的面就是候选的分割面，选一个候选面进行分割（partition）
每次分割，被分类的多边形有如下的下场：
1.被分到分割面的正向
2.被分到分割面的反向
3.被分割面相交到，需要分裂为新的多边形（所以bsp树最终要渲染的东西面可能更多）